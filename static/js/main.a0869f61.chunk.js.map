{"version":3,"sources":["scenes.js","actions.js","components/scenes/Intro.js","components/scenes/Event.js","consts/allShopItems.js","components/Card.js","components/scenes/Shop.js","components/scenes/Rest.js","components/scenes/Reward.js","components/Enemy.js","components/scenes/Battle.js","components/Screen.js","consts/mapGenerator.js","consts/consts.js","consts/allAvailableRewards.js","consts/enemies.js","utils/reducer-utils.js","reducer.js","App.js","index.js"],"names":["SCENES","ACTIONS","SET_SCENE","SET_MYDATA","SET_MYBALANCE","SET_ENEMY","SET_ATK","SET_DECK","SET_ALERT","DRAW_CARD","PLAY_CARD","SELECT_REST","GENERATE_REWARDS","SELECT_REWARD","PURCHASE_ITEM","DISCARD_CARD","BEGIN_BATTLE","TAKE_DAMAGE","END_TURN","ADD_CARD","GAME_OVER","ENEMY_TYPES","setSceneAction","type","payload","enemySeed","Math","random","atkSeed","beginBattleSeed","startingHandCount","Intro","_ref","dispatch","react_default","a","createElement","Fragment","role","aria-label","onClick","console","log","Event","eventDeets","name","description","choices","choiceResults","num","executeChoice","choice","EVENT_CHOICE","battlePayload","allShopItems","cost","id","price","Card","cardValue","useCard","effect","style","color","display","border","borderRadius","padding","margin","concat","repeat","Shop","gameData","buyCard","card","buyCardAction","map","components_Card","key","Rest","Reward","currentRewards","availableRewards","addCard","addCardAction","Enemy","enemyData","health","bio","status","nextAttack","_useState","useState","_useState2","Object","slicedToArray","danceLeft","setDanceLeft","useEffect","setTimeout","damage","Battle","playCard","playCardAction","components_Enemy","battle","enemy","alert","hand","length","discarded","seed","pointerEvents","opacity","deck","Screen","levelToSet","curScene","lvl","scenes_Intro","scenes_Shop","scenes_Event","scenes_Rest","scenes_Reward","randomizedVal","scenes_Battle","startingDeck","startingData","gold","hero","energy","attacks","runes","beginning","scene","act","allAvailableRewards","allEnemies","1","regular","passive","mini","boss","2","3","shuffle","array","sort","decideEnemyArr","decideEnemy","enemiesArr","floor","decideEnemyATK","enemyAttacks","nextATK","reducer","state","action","setSceneHandler","setMyDataHandler","setMyBalanceHandler","setAlertHandler","objectSpread","drawCardHandler","playCardHandler","discardCardHandler","setEnemyHandler","setAtkHandler","eventChoiceHandler","generateRewardsHandler","setRewardHandler","purchaseHandler","restHandler","beginBattleHandler","endTurnHandler","addCardHandler","gameOverHandler","newBalance","error","nextState","myEnergy","enemyHealth","nextDeck","push","apply","toConsumableArray","myHandIndex","indexOf","splice","applyStatusHandler","energyLeft","enemyHealthLeft","cardToRemove","_ref2","statusEffect","_nextState","enemyStatus","finalHealth","endTurnState","drawCardState","enemyArr","shuffledDeck","i","slice","ourDeck","updatedDeck","_ref3","newState","addedCardState","newGoldBalance","newCardandGoldState","randomizedCards","cardsToReturn","newStateWithFreshRewards","nextLevel","App","_useReducer","useReducer","_useReducer2","_gameData$hero","healthBarCount","className","textAlign","components_Screen","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.a0869f61.chunk.js","sourcesContent":["export const SCENES = {\n    INTRO: \"intro\",\n    SHOP: \"shop\",\n    EVENT: \"event\",\n    REST: \"rest\",\n    REWARD: \"reward\",\n    BATTLE: \"battle\",\n    MINIBOSS: \"miniboss\",\n    BOSS: \"boss\",\n    GAMEOVER: \"game over\"\n  }","export const ACTIONS = {\n  SET_SCENE: \"set_scene\",\n  SET_MYDATA: \"set-mydata\",\n  SET_MYBALANCE: \"set-mybalance\",\n  SET_ENEMY: \"set-enemy\",\n  SET_ATK: \"set-atk\",\n  SET_DECK: \"set-deck\",\n  SET_ALERT: \"set_alert\",\n  DRAW_CARD: \"draw-card\",\n  PLAY_CARD: \"play-card\",\n  SELECT_REST: \"select-rest\",\n  GENERATE_REWARDS: \"generate-rewards\",\n  SELECT_REWARD: \"select-reward\",\n  PURCHASE_ITEM: \"purchase-item\",\n  DISCARD_CARD: \"discard-card\",\n  BEGIN_BATTLE: \"begin-battle\",\n  TAKE_DAMAGE: \"take-damage\",\n  END_TURN: \"end-turn\",\n  ADD_CARD: \"add-card\",\n  GAME_OVER: \"game-over\",\n}\n\nexport const ENEMY_TYPES = {\n  REG: \"regular\",\n  MINI: \"miniboss\",\n  BOSS: \"boss\",\n}\n\nexport const addCardAction = (card) => {\n  return {\n    type: ACTIONS.SELECT_REWARD,\n    payload: { card, battlePayload: {\n      enemySeed: Math.random(),\n      atkSeed: Math.random(),\n      beginBattleSeed: Math.random(),\n      startingHandCount: 3,\n    }},\n  }\n}\n\nexport const playCardAction = (card) => {\n  return {\n    type: ACTIONS.PLAY_CARD,\n    payload: { card ,\n    battlePayload: {\n      enemySeed: Math.random(),\n      atkSeed: Math.random(),\n      beginBattleSeed: Math.random(),\n      startingHandCount: 3,\n    }},\n  }\n}\n\nexport const endTurnAction = () => {\n  console.log(`End Turn`)\n  return { type: ACTIONS.END_TURN, payload: { seed: Math.random() } }\n}\n\nexport const setSceneAction = () => {\n  return {\n    type: ACTIONS.SET_SCENE,\n    payload: {\n      enemySeed: Math.random(),\n      atkSeed: Math.random(),\n      beginBattleSeed: Math.random(),\n      startingHandCount: 3,\n    },\n  }\n}\n\nexport const buyCardAction = (card) => {\n  console.log(`adding this card:`, card)\n  return {\n    type: ACTIONS.PURCHASE_ITEM,\n    payload: {\n      card,\n      battlePayload: {\n        enemySeed: Math.random(),\n        atkSeed: Math.random(),\n        beginBattleSeed: Math.random(),\n        startingHandCount: 3,\n      },\n    },\n  }\n}\n\nexport const eventChoiceAction = (num) => {\n  return {\n    type: ACTIONS.EVENT_CHOICE,\n    payload: {\n      num,\n      battlePayload: {\n        enemySeed: Math.random(),\n        atkSeed: Math.random(),\n        beginBattleSeed: Math.random(),\n        startingHandCount: 3,\n      },\n    },\n  }\n}\n","import React from \"react\";\nimport { setSceneAction } from \"../../actions\";\n\n\nconst Intro = ({dispatch}) => {\n  const loadNextLevel = () => {\n    console.log(`loadNextLevel`);\n    dispatch(setSceneAction());\n  };\n\n  return (\n    <>\n      <h1>Slay all the things!</h1>\n      <div>This is a card game, let's see how far you can go </div>\n      <h3>instructions</h3>\n      <div>Your cards can ONLY BE USED ONCE. Use them strategically to defeat bosses</div>\n\n      <div>\n        Most importantly, have fun{\" \"}\n        <span role=\"img\" aria-label=\"emoji smile\">\n          💞😇💞\n        </span>\n      </div>\n      <br />\n      <button onClick={loadNextLevel}>Next Level</button>\n    </>\n  );\n};\n\nexport default Intro;\n","import React from 'react'\nimport { eventChoiceAction } from '../../actions';\n\nconst Event = ({dispatch}) => {\n  const eventDeets = [\n    {\n      name: \"Sample Event\",\n      description: \"You happen upon a glade\",\n      choices: [\"Fight the civilians\", \"Keep going going on path\"],\n      choiceResults: [\n        { type: \"money\", num: 30 },\n        { type: \"exit\", num: 0 }\n      ]\n    }\n  ];\n\n  // types\n  // - reward\n  //  • health\n  //  • money\n  //  • cards\n  // - enemy\n  // - story\n  // - more dialog\n\n  const executeChoice = (choice) => {\n    // console.log(`Your choice: ${choice}`, choice, choice.type);\n    switch (choice.type) {\n      case \"health\":\n        console.log(`health choice`);\n        break;\n      case \"money\":\n        console.log(`money choice`);\n        dispatch(eventChoiceAction(choice.num))\n        break;\n      case \"cards\":\n        console.log(`cards choice`);\n        break;\n      case \"enemy\":\n        console.log(`enemy choice`);\n        break;\n      case \"story\":\n        console.log(`story choice`);\n        break;\n      case \"exit\":\n        console.log(`exit choice`);\n        break;\n      default:\n        console.log(`no proper executeChoice choice`);\n        break;\n    }\n  };\n\n  return (\n    <div>\n      <h5>Event Name: {eventDeets[0].name} </h5>\n      <div>{eventDeets[0].description}</div>\n      <br />\n      <button onClick={() => executeChoice(eventDeets[0].choiceResults[0])}>\n        {eventDeets[0].choices[0]}\n      </button>\n      <button onClick={() => executeChoice(eventDeets[0].choiceResults[1])}>\n        {eventDeets[0].choices[1]}\n      </button>\n      <br />\n      <br />\n    </div>\n  );\n};\n\nexport default Event;\n","export const allShopItems = [\n    { type: \"shop_poison\", name: \"shop_drain syphon life\", num: 4, cost: 2, id: 20 },\n    {\n      type: \"electric\",\n      name: \"shop_electric symphonies\",\n      num: 8,\n      cost: 1,\n      id: 21,\n      price: 40\n    },\n    {\n      type: \"normal\",\n      name: \"shop_backstab\",\n      num: 4,\n      cost: 1,\n      id: 22,\n      price: 30\n    },\n    {\n      type: \"Ice\",\n      name: \"shop_Freeze Blast\",\n      num: 6,\n      cost: 1,\n      id: 23,\n      price: 60\n    },\n    {\n      type: \"mind\",\n      name: \"shop_hypnotic distress\",\n      num: 5,\n      cost: 1,\n      id: 24,\n      price: 20\n    },\n    {\n      type: \"pioson\",\n      name: \"shop_Black Ooze\",\n      num: 9,\n      cost: 1,\n      id: 25,\n      price: 35\n    },\n    {\n      type: \"electric\",\n      name: \"shop_overload\",\n      num: 11,\n      cost: 1,\n      id: 26,\n      price: 55\n    },\n]","import React from 'react'\nconst Card = ({ cardValue, useCard }) => {\n  const { type, name, num, cost, effect } = cardValue;\n  const styles = {\n    cardStyle: {\n      color: \"blue\",\n      display: \"inline\",\n      border: \"2px solid silver\",\n      borderRadius: \"10px\",\n      padding: \"7px\",\n      margin: \"3px\"\n    }\n  };\n\n  const energyEmoji = \"🧪\";\n  return (\n    <>\n      <button style={styles.cardStyle} onClick={() => useCard(cardValue)}>\n        {`${name} ${energyEmoji.repeat(cost)}`}\n        <h5 style={{ color: \"gray\" }}>{`(${type})`}</h5>\n        <div style={{ color: \"gray\" }}>{`Deals ${num} damage`}</div>\n        <div style={{ color: \"brown\" }}> {effect ? `${effect}s` : `` } </div>\n        { cardValue.price? <div>price: {cardValue.price}</div> : <></>}\n      </button>\n    </>\n  );\n};\n\nexport default Card;","import React from \"react\";\n// import { sampleItems } from \"../../consts/consts\";\nimport { allShopItems } from \"../../consts/allShopItems\";\n// import Item from \"../Item\";\nimport Card from \"../Card\";\nimport { buyCardAction } from \"../../actions\";\n\nconst Shop = ({ gameData, dispatch }) => {\n\n  const buyCard = (card) => {\n    console.log(`adding this card:`, card)\n    dispatch(buyCardAction(card))\n  }\n\n\n  return (\n    <div>\n      <h3>Shop Component</h3>\n      <br />\n      <h3>Its dangerous to go alone, give me money</h3>\n      <div>Items for sale (Just attacks for now)</div>\n      <div>\n      {allShopItems.map((card) => {\n          return <Card key={card.id} cardValue={card} useCard={buyCard} />\n        })}\n      </div>\n      {/* <div>\n        {allShopItems.map((item) => {\n          return (\n            <Item \n              name={item.name}\n              desc={item.desc}\n              flavortext={item.flavortext}\n              price={item.price}\n              boost={item.boost}\n            />\n          );\n        })}\n      </div> */}\n    </div>\n  );\n};\n\nexport default Shop;\n","import React from \"react\";\nimport { ACTIONS } from \"../../actions\";\nimport { setSceneAction } from \"../../actions\";\n\nconst Rest = ({dispatch}) => {\n    const loadNextLevel = () => {\n    console.log(`loadNextLevel`);\n    dispatch(setSceneAction());\n  };\n\n  const healToFullHealth = () => {\n    dispatch({\n      type: ACTIONS.SELECT_REST,\n    });\n  };\n  return (\n    <>\n      <h2>Rest Component</h2>\n      <h3>Stay a while, and listen</h3>\n      <div>As you come upon a campfire, you feel calm.</div>\n      <div>A wise old scholar greets you.</div>\n      <div>\n        You realize the old man will keep watch and alarm you if there is any\n        danger\n      </div>\n      <button\n        onClick={() => {\n          healToFullHealth();\n        }}\n      >\n        Heal\n      </button>\n      <br />\n      <br />\n      <button onClick={loadNextLevel}>Next Level</button>\n    </>\n  );\n};\n\nexport default Rest;\n","import React from \"react\"\nimport Card from \"../Card\"\nimport { addCardAction } from \"../../actions\"\n\n\n\nconst Reward = ({ gameData, dispatch }) => {\n  const currentRewards = gameData.availableRewards\n\n  const addCard = (card) => {\n    console.log(`adding this card:`, card)\n    dispatch(addCardAction(card))\n  }\n  // ------------\n  console.log(`gameData from Rewards`, gameData)\n\n  return (\n    <div>\n      <h1>Reward Component</h1>\n      <br />\n      <h3>Thank you for vanquishing those foes.</h3>\n      <h4>Please take something, its on us</h4>\n      <div>\n        {currentRewards.map((card) => {\n          return <Card key={card.id} cardValue={card} useCard={addCard} />\n        })}\n      </div>\n    </div>\n  )\n}\n\nexport default Reward\n","import React, { useState, useEffect } from 'react'\n// import enemies from \"./enemies\";\n\nconst Enemy = ({ enemyData }) => {\n  const { name, health, bio, status, nextAttack } = enemyData;\n  const [danceLeft, setDanceLeft] = useState(true);\n  useEffect(() => {\n    setTimeout(() => setDanceLeft(!danceLeft), 2000)\n  }, [danceLeft])\n\n\n  return (\n    <div style={{ border: \"2px dotted lightgray\", borderRadius: \"10px\" }}>\n      <div style={{ border: \"2px dotted lightgray\", borderRadius: \"30px\" }}>\n        ---{name} <span role='img'  aria-label=\"emoji heart\">🫀</span>{health ? health : \"None\"}---\n      </div>\n      <div>{bio}</div>\n      <br />\n      <div>\n        {danceLeft ? '🔥\\\\_(X_X)-/🔥' : '🔥\\\\-(X_X)_/🔥'}\n      </div>\n      <br />\n      {/* @TODO fix status so it shows something other than None */}\n      <div style={{ color: \"red\" }}> {status? `He is ${status}ed`: `unaffected`}</div>\n      <br />\n      <div style={{ border: \"2px dotted lightgray\", borderRadius: \"30px\" }}>\n        Next attack: <br />\n        {`${nextAttack.name}  ${nextAttack.damage}`}\n        <div>status inflict? {nextAttack.status}</div>\n      </div>\n    </div>\n  );\n};\nexport default Enemy;\n","import React from \"react\";\nimport { endTurnAction, playCardAction } from \"../../actions\";\nimport Card from \"../Card\";\nimport Enemy from \"../Enemy\";\n\nconst Battle = ({ gameData, dispatch }) => {\n  //keeping drawCard for debugging\n  // const drawCard = () => {\n  //   dispatch({\n  //     type: ACTIONS.DRAW_CARD,\n  //     payload: { deck: gameData.deck, hand: gameData.battle.hand },\n  //   });\n  // };\n\n  const playCard = (card) => {\n    dispatch(playCardAction(card));\n  };\n\n  const endTurn = () => {\n    dispatch(endTurnAction())\n  };\n\n  // 5 cases: beginning, inBattle, victory, reward screen, loss\n  // just change the scene to victory, pass the data,\n  //  {/* different phases will be done through scene changes */}\n\n  return (\n    <>\n      Battle Component\n      <div>\n        <Enemy enemyData={gameData.battle.enemy} />\n        <br />\n        <h5>Our hand:</h5>\n        <div style={{ color: \"Red\" }}>{gameData.alert}</div>\n        <div style={{ color: \"Red\" }}>\n          {gameData.battle.hand.length > 0\n            ? gameData.battle.hand.map((card) => {\n                return (\n                  <Card key={card.id} cardValue={card} useCard={playCard} />\n                );\n              })\n            : `No Cards in hand. Click \"End Turn\" to let enemies attack and you'll draw a card.`}\n        </div>\n      </div>\n      <br />\n      <div>\n        {/* Keeping draw button for debugging */}\n        {/* <button onClick={() => drawCard()}>\n          Draw a card\n        </button> */}\n        <h4 style={{ color: \"gray\" }}>\n          {gameData.battle.discarded.length} discarded Cards\n        </h4>\n        <br />\n        <br />\n        <button onClick={endTurn}>End Turn</button>\n\n        <h5 style={{ color: \"gray\" }}>Our deck:</h5>\n        <div style={{pointerEvents: \"none\", opacity: \"0.4\"}}>        {gameData.deck.map((card) => {\n          return <Card key={card.id} cardValue={card} playCard={playCard} />;\n        })}</div>\n\n      </div>\n    </>\n  );\n};\n\nexport default Battle;\n","// different screens\nimport React from \"react\";\nimport { SCENES } from \"../scenes\";\n// All of our scenes are below\nimport Intro from \"./scenes/Intro\";\nimport Event from \"./scenes/Event\";\nimport Shop from \"./scenes/Shop\";\nimport Rest from \"./scenes/Rest\";\nimport Reward from \"./scenes/Reward\";\nimport Battle from \"./scenes/Battle\";\n// import MiniBoss from \"./scenes/MiniBoss\";\n\nconst Screen = ({ gameData, dispatch, map }) => {\n  const curLevelNum = gameData.curScene.lvl;\n  const levelToSet = map[curLevelNum];\n  console.log(`levelToSet is:`, levelToSet);\n\n  const {\n    INTRO,\n    BATTLE,\n    SHOP,\n    EVENT,\n    REST,\n    REWARD,\n    MINIBOSS,\n    BOSS,\n    GAMEOVER,\n  } = SCENES;\n\n  switch (levelToSet) {\n    case INTRO:\n      return <Intro dispatch={dispatch} />;\n    case SHOP:\n      console.log(\"shop Screen Case\");\n      return <Shop dispatch={dispatch} />;\n    case EVENT:\n      console.log(\"event Screen Case\");\n      return <Event dispatch={dispatch} />;\n    case REST:\n      console.log(\"rest Screen Case\");\n      return <Rest dispatch={dispatch} />;\n    case REWARD:\n      console.log(\"reward Screen Case\");\n      return <Reward gameData={gameData} dispatch={dispatch} randomizedVal={Math.random()} />;\n    case BATTLE:\n      console.log(\"(battle Screen)\");\n      return <Battle gameData={gameData} dispatch={dispatch} />;\n    case MINIBOSS:\n      console.log(\"miniboss Screen Case\");\n      return <Battle gameData={gameData} dispatch={dispatch} />;\n    case BOSS:\n      console.log(\"boss Screen Case\");\n      return <Battle gameData={gameData} dispatch={dispatch} />;\n    case GAMEOVER:\n      console.log(\"game over Screen Case\");\n      return <div>`game over`</div>;\n    default:\n      console.log(\"no scene (Screen Case) selected\");\n      return <>404 Yo</>;\n  }\n};\n\n// Screen.propTypes = {\n//   gameData: PropTypes.object,\n//   dispatch: PropTypes.func,\n//   map: PropTypes.array\n// };\n\nexport default Screen;\n","import { SCENES } from \"../scenes\";\n\nconst { INTRO, BATTLE, SHOP, REWARD, EVENT, REST, MINIBOSS, BOSS, GAMEOVER } = SCENES;\n\nconst mapGenerator = () => {\n  return [\n    GAMEOVER,\n    INTRO,\n    BATTLE,\n    REWARD,\n    REWARD,\n    SHOP,\n    BATTLE,\n    REWARD,\n    REWARD,\n    EVENT,\n    BATTLE,\n    REWARD,\n    REWARD,\n    REST,\n    MINIBOSS,\n    REWARD,\n    REWARD,\n    BATTLE,\n    REWARD,\n    REWARD,\n    BATTLE,\n    REWARD,\n    REWARD,\n    REST,\n    BOSS,\n    REWARD,\n    REWARD,\n    //Act 2\n    EVENT,\n    BATTLE,\n    REWARD,\n    SHOP,\n    BATTLE,\n    REWARD,\n    EVENT,\n    BATTLE,\n    REWARD,\n    REST,\n    MINIBOSS,\n    REWARD,\n    BATTLE,\n    REWARD,\n    BATTLE,\n    REWARD,\n    REST,\n    BOSS,\n    //Act 3\n    REWARD,\n    EVENT,\n    BATTLE,\n    REWARD,\n    SHOP,\n    BATTLE,\n    REWARD,\n    EVENT,\n    BATTLE,\n    REWARD,\n    REST,\n    MINIBOSS,\n    REWARD,\n    BATTLE,\n    REWARD,\n    BATTLE,\n    REWARD,\n    REST,\n    BOSS,\n  ];\n};\n\nexport const map = mapGenerator();\n","export const startingDeck = [\n  { type: \"Fire\", name: \"Flamethrower+\", num: 8, cost: 1, id: 1, effect: null },\n  { type: \"Water\", name: \"Gush+\", num: 6, cost: 1, id: 2, effect: null },\n  { type: \"Poison\", name: \"Sting+\", num: 5, cost: 1, id: 3, effect: null },\n  { type: \"Fire\", name: \"Flamethrower\", num: 4, cost: 1, id: 4, effect: null },\n  { type: \"Physical\", name: \"Throw Fist\", num: 3, cost: 2, id: 5, effect: \"stun\" },\n  { type: \"Physical\", name: \"Throw Fist\", num: 3, cost: 2, id: 6, effect: \"stun\" },\n  { type: \"Fire\", name: \"Flamethrower\", num: 4, cost: 1, id: 7, effect: null },\n  { type: \"Water\", name: \"Gush\", num: 2, cost: 1, id: 8, effect: null },\n  { type: \"Poison\", name: \"Sting\", num: 2, cost: 1, id: 9, effect: null },\n  { type: \"Fire\", name: \"Flamethrower\", num: 5, cost: 1, id: 10, effect: null },\n  { type: \"Physical\", name: \"Throw Fist\", num: 5, cost: 2, id: 11, effect: \"stun\" },\n  { type: \"Physical\", name: \"Throw Fist\", num: 5, cost: 2, id: 12, effect: \"stun\" },\n];\n\nexport const startingData = {\n  deck: startingDeck,\n  gold: 50,\n  hero: {\n    health: 100,\n    energy: 5,\n    status: \"Feeling Fine\",\n  },\n  battle: {\n    enemy: {\n      name: \"sample guy\",\n      bio: \"just a standaard enemi\",\n      health: \"30\",\n      energy: 6,\n      status: \"none\",\n      nextAttack: \"none\",\n      attacks: [\n        {\n          name: \"sample atk hitting you\",\n          type: \"hit\",\n          damage: 20,\n          status: \"stun\",\n        },\n        {\n          name: \"sample atk hitting again\",\n          type: \"hit\",\n          damage: 40,\n          status: null,\n        },\n      ],\n    },\n    runes:[],\n    hand: [],\n    discarded: [],\n    beginning: false,\n  },\n  curScene: { scene: \"intro\", lvl: 1, act: 1 },\n  availableRewards: [],\n  alert: \"\",\n};\n\nexport const sampleItems = [\n  {\n    name: \"Wand of Gameleon\",\n    desc: \"+50 to total health\",\n    boost: {health: 50},\n    flavortext: `\"The Wand of Gameleon's power is has been spoken of \n          in historical texts to give life\n          to the one who holds it\" -Korvo, the missing link`,\n    price: 50,\n  },\n  {\n    name: \"Kamuk's Brute Sword\",\n    desc: \"-4 to total health, +3 to base damage\",\n    boost: {health: -50, baseDMG: 3},\n    flavortext: `Kamuk's prey never stood a chance.\n     His rage radiated from him, \n     imbuing everything around with power,\n      the grass, his clothes, and his blade.`,\n    price: 25,\n  },\n  {\n    name: \"Isiaac's Lucky tooth\",\n    desc: \"Every 3 turns, you get an extra energy\",\n    boost: {rune: 'RUNE.LUCKYTOOTH (@TODO: add this)'},\n    flavortext: `Isiaac only knew pain, so he didn't realized this was missing`,\n    price: 40,\n  },\n];\nexport const fullEnergyAmount = 5;\n","export const allAvailableRewards = [\n    { type: \"poison\", name: \"drain syphon life\", num: 4, cost: 2, id: 20 },\n    {\n      type: \"electric\",\n      name: \"electric symphonies\",\n      num: 8,\n      cost: 1,\n      id: 21,\n    },\n    {\n      type: \"normal\",\n      name: \"backstab\",\n      num: 4,\n      cost: 1,\n      id: 22,\n    },\n    {\n      type: \"Ice\",\n      name: \"Freeze Blast\",\n      num: 6,\n      cost: 1,\n      id: 23,\n    },\n    {\n      type: \"mind\",\n      name: \"hypnotic distress\",\n      num: 5,\n      cost: 1,\n      id: 24,\n    },\n    {\n      type: \"pioson\",\n      name: \"Black Ooze\",\n      num: 9,\n      cost: 1,\n      id: 25,\n    },\n    {\n      type: \"electric\",\n      name: \"overload\",\n      num: 11,\n      cost: 1,\n      id: 26,\n    },\n]","export const allEnemies = {\n  1: {\n    regular: [\n      {\n        name: \"EvilMan\",\n        health: 10,\n        passive: \"none\",\n        bio: \"A bad dude\",\n        status: null,\n        attacks: [\n          {\n            name: \"flails fist at you\",\n            type: \"hit\",\n            damage: 20,\n            status: \"dizzy\",\n          },\n          {\n            name: \"flails fist HARDER\",\n            type: \"hit\",\n            damage: 40,\n            status: null,\n          },\n        ],\n      },\n      {\n        name: \"Lackey\",\n        health: 30,\n        passive: \"heal\",\n        bio: \"A bad dude's smaller dude\",\n        status: null,\n        attacks: [\n          {\n            name: \"flails fist weakly\",\n            type: \"hit\",\n            damage: 11,\n            status: \"dizzy\",\n          },\n          {\n            name: \"teeny punch\",\n            type: \"hit\",\n            damage: 5,\n            status: null,\n          },\n        ],\n      },\n      {\n        name: \"Grunt\",\n        health: 20,\n        passive: \"boost\",\n        bio: \"A crazy guy, don't make him angry\",\n        status: null,\n        attacks: [\n          {\n            name: \"Big ol' slash\",\n            type: \"hit\",\n            damage: 20,\n            status: \"weak\",\n          },\n          {\n            name: \"comically bad swipe\",\n            type: \"hit\",\n            damage: 3,\n            status: null,\n          },\n        ],\n      },\n    ],\n    mini: [      {\n      name: \"EvilMINIBOSSMan\",\n      health: 60,\n      passive: null,\n      bio: \"A bad dude\",\n      status: null,\n      attacks: [\n        {\n          name: \"flails fist at you\",\n          type: \"hit\",\n          damage: 20,\n          status: \"stun\",\n        },\n        {\n          name: \"flails fist HARDER\",\n          type: \"hit\",\n          damage: 40,\n          status: null,\n        },\n        {\n          name: \"too tired to attack\",\n          type: \"hit\",\n          damage: 0,\n          status: null,\n        },\n        {\n          name: \"distracted movement\",\n          type: \"hit\",\n          damage: 0,\n          status: null,\n        },\n      ],\n    },],\n    boss: [      {\n      name: \"EvilACT1BOSSMan\",\n      health: 120,\n      passive: null,\n      bio: \"A bad dude\",\n      status: null,\n      attacks: [\n        {\n          name: \"flails fist at you\",\n          type: \"hit\",\n          damage: 20,\n          status: \"stun\",\n        },\n        {\n          name: \"flails fist REALLY HARD\",\n          type: \"hit\",\n          damage: 40,\n          status: null,\n        },\n      ],\n    },],\n  },\n  2: { regular: [], mini: [], boss: [] },\n  3: { regular: [], mini: [], boss: [] },\n};\n\n// export const enemyTypes = {\n//   actOne: [],\n//   actOneMini: [],\n//   actOneBoss: [],\n//   actTwo: [],\n//   actTwoMini: [],\n//   actTwoBoss: [],\n//   actThree: [],\n//   actThreeMini: [],\n//   actThreeBoss: [],\n//   finalBoss: [],\n//   enemies: [\n//     {\n//       name: \"EvilMan\",\n//       health: 15,\n//       passive: \"none\",\n//       bio: \"A bad dude\",\n//       status: \"none\",\n//       attacks: [\n//         {\n//           name: \"flails fist at you\",\n//           type: \"hit\",\n//           damage: 20,\n//           status: \"dizzy\",\n//         },\n//         {\n//           name: \"flails fist HARDER\",\n//           type: \"hit\",\n//           damage: 40,\n//           status: \"none\",\n//         },\n//       ],\n//     },\n//     {\n//       name: \"Lackey\",\n//       health: 10,\n//       passive: \"heal\",\n//       bio: \"A bad dude's smaller dude\",\n//       status: \"none\",\n//       attacks: [\n//         {\n//           name: \"flails fist weakly\",\n//           type: \"hit\",\n//           damage: 11,\n//           status: \"dizzy\",\n//         },\n//         {\n//           name: \"teeny punch\",\n//           type: \"hit\",\n//           damage: 5,\n//           status: \"none\",\n//         },\n//       ],\n//     },\n//   ],\n// };\n","// import { enemies } from \"../consts/consts\";\nimport { allEnemies } from \"../consts/enemies\";\n// const { enemies } = enemyTypes;\n// actOne: [],\n// actOneMini: [],\n// actOneBoss: [],\n// actTwo: [],\n\nexport const shuffle = (array, seed) => {\n  return array.sort(() => seed - 0.5);\n};\n\nexport const decideEnemyArr = (act, type) => {\n  // acts would be Act1, Act2, Act3\n  // types woul be regular, miniboss, boss\n  return allEnemies[act][type];\n};\n\n// seed, and lvl/miniboss/boss/etc. What type\nexport const decideEnemy = (seed, enemiesArr) => {\n  //@todo: check for which level enemies they should be\n  //return those level enemies like\n  const rndm = Math.floor(seed * enemiesArr.length);\n  const ourEnemy = enemiesArr[rndm];\n  return ourEnemy;\n};\n\nexport const decideEnemyATK = (seed, enemyAttacks) => {\n  // console.log(`setAtkHandler: missing attacks`, state.battle.enemy);\n  console.log(`ennmyATK enemyAttacks`, enemyAttacks, `seed`, seed)\n  const randomizeATK = Math.floor(seed * enemyAttacks.length);\n  const nextATK = enemyAttacks[randomizeATK];\n  console.log(`decideEnemyATK: next attack`, nextATK);\n\n  return nextATK;\n};\n","import { ACTIONS, ENEMY_TYPES } from \"./actions\"\nimport { SCENES } from \"./scenes\"\nimport { startingDeck, startingData, fullEnergyAmount } from \"./consts/consts\"\nimport { allAvailableRewards } from \"./consts/allAvailableRewards\"\nimport {\n  shuffle,\n  decideEnemyArr,\n  decideEnemy,\n  decideEnemyATK,\n} from \"./utils/reducer-utils\"\nimport { map } from \"./consts/mapGenerator\"\n\nexport default function reducer(state, action) {\n  //option to deep clone the state immediately here,\n  //solving all problems of stale state\n  const { payload } = action\n  switch (action.type) {\n    case ACTIONS.SET_SCENE:\n      return setSceneHandler(state, payload)\n    case ACTIONS.SET_MYDATA:\n      return setMyDataHandler(state, payload)\n    case ACTIONS.SET_MYBALANCE:\n      return setMyBalanceHandler(state, payload)\n    case ACTIONS.SET_ALERT:\n      return setAlertHandler(state, payload)\n    case ACTIONS.SET_DECK:\n      return { ...state, deck: payload }\n    case ACTIONS.DRAW_CARD:\n      return drawCardHandler(state, payload)\n    case ACTIONS.PLAY_CARD:\n      return playCardHandler(state, payload)\n    case ACTIONS.DISCARD_CARD:\n      return discardCardHandler(state, payload)\n    case ACTIONS.SET_ENEMY:\n      return setEnemyHandler(state, payload)\n    case ACTIONS.SET_ATK:\n      return setAtkHandler(state, payload)\n    // level handlers\n    case ACTIONS.EVENT_CHOICE:\n      return eventChoiceHandler(state, payload)\n    case ACTIONS.GENERATE_REWARDS:\n      return generateRewardsHandler(state, payload)\n    case ACTIONS.SELECT_REWARD:\n      return setRewardHandler(state, payload)\n    case ACTIONS.PURCHASE_ITEM:\n      return purchaseHandler(state, payload)\n    case ACTIONS.SELECT_REST:\n      return restHandler(state)\n    case ACTIONS.BEGIN_BATTLE:\n      return beginBattleHandler(state, payload)\n    case ACTIONS.END_TURN:\n      return endTurnHandler(state, payload)\n    case ACTIONS.ADD_CARD:\n      return addCardHandler(state, payload)\n    case ACTIONS.GAME_OVER:\n      return gameOverHandler(state)\n    default:\n      console.log(`no action type matched, returning state`)\n      return state\n  }\n}\n\n// General GameData Handlers\nconst setMyDataHandler = (payload) => {\n  return payload\n}\n\nconst setMyBalanceHandler = (state, payload) => {\n  const newBalance = state.gold + payload\n  const nextState = { ...state, gold: newBalance }\n  return nextState\n}\n\nconst setAlertHandler = (state, payload) => {\n  console.error(\"payload\", payload)\n  return {\n    ...state,\n    alert: payload,\n  }\n}\n\n// Battle Handlers\n\nconst playCardHandler = (state, { card, battlePayload }) => {\n  console.log(`payload&card`, card, battlePayload)\n  let nextState = { ...state }\n  const myEnergy = nextState.hero.energy\n  const enemyHealth = nextState.battle.enemy.health\n\n  if (myEnergy < card.cost) {\n    return setAlertHandler(nextState, `Not enough energy to play that card :(`)\n  }\n  if (enemyHealth - card.num <= 0) {\n    console.log(`you defeated the enemy!`)\n\n    //put hand back into deck\n    let nextDeck = []\n    nextDeck.push(...nextState.deck)\n    nextDeck.push(...nextState.battle.hand)\n    console.log(`nextDeck`, nextDeck)\n\n    // generate new rewards\n    nextState = generateRewardsHandler(\n      nextState,\n      battlePayload\n      //(seed, level)\n    )\n\n    nextState = setMyDataHandler({\n      ...nextState,\n      gold: nextState.gold + 25,\n      deck: nextDeck,\n    })\n    console.log(`nextState`, nextState)\n\n    const payload = battlePayload\n    console.log(`payload`, battlePayload)\n\n    nextState = setSceneHandler(nextState, payload)\n  }\n  // play the card\n  const myHandIndex = nextState.battle.hand.indexOf(card)\n  const hand = [...nextState.battle.hand]\n  hand.splice(myHandIndex, 1)\n\n  if (card.effect != null) {\n    const statusPayload = { card, battlePayload }\n    nextState = applyStatusHandler(nextState, statusPayload)\n  }\n\n  // If status affect, use status affect\n  // appliedStatusState = applyStatusHandler(state, payload)\n\n  // poison deals damage,\n  // stun makes him not attack next turn\n  // injure makes his attacks weaker\n  // sleep makes him possibly not attack for multiple turns\n\n  // buffs\n  // evasion buff\n  // armor buff\n  // heal buff\n\n  const energyLeft = nextState.hero.energy - card.cost\n  const enemyHealthLeft = nextState.battle.enemy.health - card.num\n  nextState = {\n    ...nextState,\n    hero: { ...nextState.hero, energy: energyLeft },\n    battle: {\n      ...nextState.battle,\n      enemy: {\n        ...nextState.battle.enemy,\n        health: enemyHealthLeft,\n      },\n      hand,\n    },\n  }\n  console.log(`nextState: `, nextState)\n  return discardCardHandler(nextState, { cardToRemove: card })\n}\n\nconst applyStatusHandler = (state, { card, battlePayload }) => {\n  console.log(`Apply Status effect`, card, battlePayload)\n\n  const nextState = { ...state }\n  const statusEffect = card.effect\n  console.log(`Apply Status of ${statusEffect}`, card, battlePayload)\n  switch (statusEffect) {\n    case \"stun\":\n      return {\n        ...nextState,\n        battle: {\n          ...nextState.battle,\n          enemy: { ...nextState.battle.enemy, status: \"stun\" },\n        },\n      }\n    default:\n      console.log(`no statusEffect matched, returning state`)\n      return nextState\n  }\n}\n\nconst discardCardHandler = (state, payload) => {\n  return {\n    ...state,\n    battle: {\n      ...state.battle,\n      discarded: [...state.battle.discarded, payload.cardToRemove],\n    },\n  }\n}\n\nconst endTurnHandler = (state, payload) => {\n  let nextState = { ...state }\n  //\n  const { hero, battle } = nextState\n  const enemyStatus = nextState.battle.enemy.status\n  // apply status effects. maybe a applyStatusEffectsHandler()\n  let finalHealth = hero.health\n  //  let finalHealth = hero.health - battle.enemy.nextAttack.damage\n\n\n  // Apply Status with attacks\n  switch (enemyStatus) {\n    case \"stun\":\n      console.log(`stunned, so don't attack, set status to _null_`)\n      const enemyWithoutStatusState = {\n        ...nextState,\n        battle: {\n          ...nextState.battle,\n          enemy: { ...nextState.battle.enemy, status: null },\n        },\n      }\n      nextState = enemyWithoutStatusState\n      break\n    case null:\n      console.log(` enemyStatus of null matched, returning a hero-damaged state`)\n      finalHealth = finalHealth - battle.enemy.nextAttack.damage\n      break\n    default:\n      console.log(`no enemyStatus matched, returning state`)\n  }\n\n  if (finalHealth > 0) {\n    // if not dead, update health and fill energy, draw a card, and set enemy's attack\n    const endTurnState = {\n      ...nextState,\n      hero: {\n        ...nextState.hero,\n        health: finalHealth,\n        energy: fullEnergyAmount,\n      },\n    }\n    const drawCardState = drawCardHandler(endTurnState)\n    nextState = setAtkHandler(drawCardState, payload)\n    // Clear the alert messages\n    nextState = setAlertHandler(nextState, ``)\n\n    return nextState\n  } else {\n    return gameOverHandler(state)\n  }\n}\n\nconst setEnemyHandler = (state, payload) => {\n  const { seed, enemyArr } = payload\n\n  return {\n    ...state,\n    battle: { ...state.battle, enemy: decideEnemy(seed, enemyArr) },\n  }\n}\n\nconst setAtkHandler = (state, payload) => {\n  const { seed } = payload\n\n  return {\n    ...state,\n    battle: {\n      ...state.battle,\n      enemy: {\n        ...state.battle.enemy,\n        nextAttack: decideEnemyATK(seed, state.battle.enemy.attacks),\n      },\n    },\n  }\n}\n\nconst beginBattleHandler = (state, payload) => {\n  const { startingHandCount, seed } = payload\n  let shuffledDeck = []\n  if (state.deck.length <= 0) {\n    // impure\n    console.log(`using starting deck`)\n    shuffledDeck = shuffle(startingDeck, seed)\n  } else {\n    console.log(`using current deck`, state.deck)\n    shuffledDeck = shuffle(state.deck, seed)\n  }\n  let nextState = {\n    ...state,\n    battle: { ...state.battle, beginning: true, hand: [] },\n    deck: [...shuffledDeck],\n    hero: { ...state.hero, energy: fullEnergyAmount },\n  }\n\n  for (let i = 0; i < startingHandCount; i++) {\n    nextState = drawCardHandler(nextState)\n  }\n\n  return nextState\n}\n\nconst drawCardHandler = (state) => {\n  if (state.deck.length > 0) {\n    return {\n      ...state,\n      battle: {\n        ...state.battle,\n        hand: [...state.battle.hand, state.deck[0]],\n      },\n      deck: state.deck.slice(1),\n    }\n  } else {\n    return {\n      ...state,\n      alert: \"No cards left to draw :( \",\n    }\n  }\n}\n\nconst gameOverHandler = (state) => {\n  return {\n    ...startingData,\n    curScene: {\n      scene: SCENES.GAMEOVER,\n      lvl: 0,\n      act: 0,\n    },\n  }\n}\n\nconst addCardHandler = (state, payload) => {\n  const ourDeck = state.deck\n  ourDeck.push(payload.card)\n  // set some notification that the card is added\n  const updatedDeck = ourDeck\n  console.log(`adding card to deck, and full deck here`, payload, updatedDeck)\n  return { ...state, deck: updatedDeck }\n}\n\n// GameEvent Handlers\n\nconst restHandler = (state) => {\n  const fullHealed = {\n    ...state,\n    hero: { ...state.hero, health: startingData.hero.health },\n  }\n  return fullHealed\n}\n\nconst eventChoiceHandler = (state, { num, battlePayload }) => {\n  //maybe as a `switch` statement to determine the actions\n  const newState = setMyBalanceHandler(state, num)\n  const nextSceneState = setSceneHandler(newState, battlePayload)\n  return nextSceneState\n}\n\nconst purchaseHandler = (state, payload) => {\n  // ---\n  const { card, battlePayload } = payload\n  const nextState = { ...state }\n  //subtract the money from the gameData.gold,\n  // add the card from the payload\n  if (nextState.gold >= card.price) {\n    const addedCardState = addCardHandler(nextState, { card })\n    const newGoldBalance = addedCardState.gold - card.price\n\n    const newCardandGoldState = { ...addedCardState, gold: newGoldBalance }\n    const returnableState = setSceneHandler(newCardandGoldState, battlePayload)\n    return returnableState\n  } else {\n    // if you don't have enough money, you can buy.\n    console.log(`not enough money to buy ${card.name}`)\n    return nextState\n  }\n  // return returnableState\n  // ---\n}\n\nconst generateRewardsHandler = (state, payload) => {\n  console.log(\n    `generateRewardsHandler running:`,\n    state,\n    `payload (currently none)`,\n    payload\n  )\n  // take list of rewards, use a seed for the randomization\n  let randomizedCards = shuffle(allAvailableRewards, Math.random())\n  // let randomizedCards = shuffle(rewardAttacks, Math.random() * seed)\n  console.log(`reward card arr`, randomizedCards)\n\n  const cardsToReturn = randomizedCards.slice(0, 3)\n  console.log(`reward card arr sliced for only 3`, randomizedCards)\n\n  const nextState = { ...state, availableRewards: cardsToReturn }\n  return nextState\n}\n\nconst setRewardHandler = (state, payload) => {\n  const newState = addCardHandler(state, payload)\n\n  const newStateWithFreshRewards = generateRewardsHandler(\n    newState\n    // ,payload (seed, level)\n  )\n  const nextSceneState = setSceneHandler(\n    newStateWithFreshRewards,\n    payload.battlePayload\n  )\n  return nextSceneState\n  // return newState;\n}\n\n// Set Level Handlers\nconst setSceneHandler = (state, payload) => {\n  const { enemySeed, atkSeed, beginBattleSeed, startingHandCount } = payload\n  const nextLevel = {\n    scene: map[state.curScene.lvl + 1],\n    lvl: state.curScene.lvl + 1,\n    act: state.curScene.act,\n  }\n  let nextState = state\n\n  let enemyArr = []\n  switch (nextLevel.scene) {\n    case SCENES.BATTLE:\n      enemyArr = decideEnemyArr(state.curScene.act, ENEMY_TYPES.REG)\n\n      // typical battle code:\n      nextState = setEnemyHandler(nextState, {\n        seed: enemySeed,\n        enemyArr: enemyArr,\n      })\n      nextState = setAtkHandler(nextState, { seed: atkSeed })\n      nextState = beginBattleHandler(nextState, {\n        seed: beginBattleSeed,\n        startingHandCount,\n      })\n      break\n    case SCENES.MINIBOSS:\n      enemyArr = decideEnemyArr(state.curScene.act, `mini`)\n      // typical battle code:\n      nextState = setEnemyHandler(nextState, {\n        seed: enemySeed,\n        enemyArr: enemyArr,\n      })\n      nextState = setAtkHandler(nextState, { seed: atkSeed })\n      nextState = beginBattleHandler(nextState, {\n        seed: beginBattleSeed,\n        startingHandCount,\n      })\n      break\n    case SCENES.BOSS:\n      enemyArr = decideEnemyArr(state.curScene.act, `boss`)\n      // typical battle code:\n      nextState = setEnemyHandler(nextState, {\n        seed: enemySeed,\n        enemyArr: enemyArr,\n      })\n      nextState = setAtkHandler(nextState, { seed: atkSeed })\n      nextState = beginBattleHandler(nextState, {\n        seed: beginBattleSeed,\n        startingHandCount,\n      })\n      break\n    default:\n      console.log(\n        `setSceneHandler type isn't battle, type is: ${nextLevel.scene}`,\n        nextLevel\n      )\n  }\n\n  return {\n    ...nextState,\n    curScene: nextLevel,\n  }\n}\n","import React from \"react\";\nimport \"./styles.css\";\nimport Screen from \"./components/Screen\";\nimport { useReducer } from \"react\";\nimport { map } from \"./consts/mapGenerator\";\nimport { startingData } from \"./consts/consts\";\nimport reducer from \"./reducer\";\n// import { setSceneAction } from \"./actions\";\n\nexport default function App() {\n  const [gameData, dispatch] = useReducer(reducer, startingData);\n\n  // Uncomment this, the import, and button below for control to always load another level\n  // const loadNextLevel = () => {\n  //   console.log(`loadNextLevel`);\n  //   dispatch(setSceneAction());\n  // };\n  // console.log(`[App.js Rendered]`);\n\n  const { health, energy } = gameData.hero;\n  const healthBarCount = health / 4;\n  const heartEmoji = `❤️`;\n\n  return (\n    <div className=\"App\">\n      <div>\n        <h3 style={{ textAlign: \"center\" }}>\n          {heartEmoji.repeat(healthBarCount)}\n        </h3>\n        <h3>\n          {`Hero: 💞${health}HP 🧪${energy} Energy 💰${gameData.gold} Gold  [ level TBD, Progression: \n        ${gameData.curScene.lvl} -ACT${gameData.curScene.act}- ]`}\n        </h3>\n      </div>\n      <Screen gameData={gameData} dispatch={dispatch} map={map} />\n      {/* <button onClick={loadNextLevel}>Next Level</button> */}\n    </div>\n  );\n}\n","import React from 'react'\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n    <App />\n);\n"],"sourceRoot":""}